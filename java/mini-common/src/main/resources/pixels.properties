###### storage engine settings ######

### pixels reader, writer, and compactor settings ###
# the pixels stride (number of values in a pixel) for pixels writer, set it to multiple of 8 for better performance
pixel.stride=10000
# the row group size in bytes for pixels writer, should not exceed 2GB
row.group.size=268435456
# the alignment of the start offset of a column chunk in the file, it is for SIMD and its unit is byte
column.chunk.alignment=32
# the alignment of the start offset of the isnull bitmap in a column chunk,
# it is for the compatibility of DuckDB and its unit is byte.
# for DuckDB, it is only effective when column.chunk.alignment also meets the alignment of the isNull bitmap
isnull.bitmap.alignment=8
# whether column chunks are encoded in pixels writer
column.chunk.encoding=true
# whether little-endian is used on the column chunks in pixels writer
column.chunk.little.endian=true
# the block size for block-wise storage systems such as HDFS
block.size=2147483648
# the number of bytes to be compressed as a block using heavy compression algorithms
compression.block.size=1048576
# row batch size for pixels record reader, default value is 10000
row.batch.size=10000

### file storage and I/O ###
# the scheme of the storage systems that are enabled, e.g., hdfs,file,s3,gcs,minio,redis
enabled.storage.schemes=s3,minio,file,httpstream
# which scheduler to use for read requests, valid values: noop, sortmerge, ratelimited
read.request.scheduler=sortmerge
read.request.merge.gap=0
# rate limits only work for s3+ratelimited
read.request.rate.limit.rps=16000
read.request.rate.limit.mbps=1200
read.request.enable.retry=true
read.request.max.retry.num=3
# the interval in milliseconds of retry queue checks
read.request.retry.interval.ms=1000
localfs.block.size=4096
localfs.enable.direct.io=false
# if mmap is enabled, direct io will be ignored
localfs.enable.mmap=false
localfs.enable.async.io=true
localfs.reader.threads=40
